name: Deploy to Production

on:
    workflow_dispatch:
        inputs:
            reason:
                description: "Reason for production deployment"
                required: false
                type: string
    push:
        branches: [main]

jobs:
    check-deploy:
        runs-on: ubuntu-latest
        outputs:
            skip: ${{ steps.skip_check.outputs.skip }}
        steps:
            - name: Check for --skip-deploy flag
              id: skip_check
              run: |
                  echo "Commit message: ${{ github.event.head_commit.message }}"
                  if [[ "${{ github.event.head_commit.message }}" == *"--skip-deploy"* ]]; then
                    echo "skip=true" >> $GITHUB_OUTPUT
                  else
                    echo "skip=false" >> $GITHUB_OUTPUT
                  fi

    deploy:
        needs: check-deploy
        if: needs.check-deploy.outputs.skip == 'false'
        runs-on: ubuntu-latest
        environment: production

        steps:
            - name: Send Deploy Start Notification
              uses: sarisia/actions-status-discord@v1
              if: always()
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  noprefix: true
                  title: "üöÄ Deployment Started"
                  description: |
                      Starting deployment to production environment...
                      - Reason: `${{ github.event.inputs.reason || github.event.head_commit.message || 'Manual deploy' }}`
                  color: 0x008cff

            - name: Verify Dependencies
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      echo "Checking dependencies..."
                      echo "========================"

                      # Node.js check and install
                      if ! command -v node &> /dev/null; then
                          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - 
                          sudo apt-get install -y nodejs
                      fi

                      # Check Yarn
                      if ! command -v yarn &> /dev/null; then
                          echo "Installing Yarn..."
                          npm install -g yarn
                      fi

                      # PM2 check
                      if ! command -v pm2 &> /dev/null; then
                          npm install -g pm2
                      fi

            - name: List Current PM2 Processes
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      echo "List of current pm2 processes:"
                      echo "==============================="
                      pm2 ls

            - name: Pull Changes & Build
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      # Pull latest changes
                      cd ~/projects/daily-challenge || { echo "Directory not found"; exit 1; }

                      # Check if there are any uncommitted changes
                      if [[ -n $(git status -s) ]]; then
                          echo "Error: Working directory is not clean. Please commit or stash changes."
                          exit 1
                      fi

                      # Try to pull and capture the output
                      pull_output=$(git pull 2>&1)
                      pull_status=$?
                      echo "$pull_output"

                      # Check for conflicts or errors
                      if [[ $pull_status -ne 0 ]] || [[ $pull_output == *"CONFLICT"* ]] || [[ $pull_output == *"error:"* ]]; then
                          echo "Error: Git pull failed or encountered conflicts"
                          git status
                          exit 1
                      fi

                      echo "Installing dependencies..."
                      yarn install

                      # Build both frontend and backend
                      echo "Building project..."
                      yarn build

                      # Reload service
                      echo "Reloading service..."
                      pm2 reload daily-challenge || pm2 start "yarn prod" --name daily-challenge

                      # Ensure it's running
                      sleep 5
                      pm2 ls

                      # Show initial logs
                      echo "Success! Showing startup logs for 5 seconds..."
                      timeout 5 pm2 logs daily-challenge --lines 10 || true
                      exit 0

    notify:
        needs: [check-deploy, deploy]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Send Discord Notification
              uses: sarisia/actions-status-discord@v1
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  noprefix: true
                  title: >-
                      ${{ needs.check-deploy.outputs.skip == 'true' && '‚è≠Ô∏è Deployment Skipped' ||
                          (needs.deploy.result == 'success' && '‚úÖ Deployment Successful') ||
                          '‚ùå Deployment Failed' }}
                  description: >-
                      ${{ needs.check-deploy.outputs.skip == 'true'
                          && 'Deployment was skipped due to `--skip-deploy` flag in commit message.'
                          || format('- Status: `{0}`\n - Reason: `{1}`',
                              needs.deploy.result,
                              github.event.inputs.reason || github.event.head_commit.message || 'Automated deploy') }}
                  color: >-
                      ${{ needs.check-deploy.outputs.skip == 'true' && '0xffff00' ||
                          (needs.deploy.result == 'success' && '0x1df27d') || '0xff5050' }}
                  content: >-
                      ${{ needs.deploy.result != 'success' && needs.check-deploy.outputs.skip != 'true'
                          && '‚ö†Ô∏è deploy failed! <@341321481390784512>' || '' }}
